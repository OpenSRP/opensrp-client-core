description = 'OpenSRP core client library'

buildscript {
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.1.2'
        classpath 'org.apache.commons:commons-lang3:3.7'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.2'
    }
}

allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
        google()
        jcenter()
    }
}

apply plugin: 'com.android.library'
//apply plugin: 'org.robolectric'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'

jacoco {
    toolVersion = "0.8.0"
}

def cfg = rootProject.ext.configuration
def libs = rootProject.ext.libraries

android {
    compileSdkVersion cfg.compileVersion
    buildToolsVersion cfg.buildToolsVersion
    useLibrary 'org.apache.http.legacy'

    defaultPublishConfig !isReleaseBuild() ? "debug" : "release"

    signingConfigs {
        config {
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storeFile file("$rootDir/assets/security/debug.keystore")
            storePassword 'android'
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            debuggable true
            testCoverageEnabled = true
            signingConfig signingConfigs.config
            zipAlignEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            zipAlignEnabled true
        }
    }

    lintOptions {
        abortOnError false
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }

    defaultConfig {
        // Enabling multidex support.
        multiDexEnabled true
        //applicationId "org.smartregister"
        minSdkVersion cfg.minSdk
        targetSdkVersion cfg.targetSdk
        versionCode Integer.parseInt(project.VERSION_CODE)
        versionName project.VERSION_NAME
        testInstrumentationRunner "android.test.InstrumentationTestRunner"
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDir 'src/main/java'
            res.srcDirs = ['res']
            assets.srcDir 'assets'
            jniLibs.srcDirs 'src/main/native'
            resources.srcDir 'resources'
        }
        androidTest.setRoot('src/androidTest')
    }


    aaptOptions {
        noCompress 'apk'
    }

    // avoid errors with message 'Duplicate files copied in APK ...'
    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

def filesToCopy = copySpec {
    from "${projectDir}/src/test/resources"
}

task copyTestResources() {
    def path = "${buildDir}/intermediates/classes/test"
    def paths = ["${path}/debug", "${path}/release"]
    paths.each { dest ->
        copy {
            with filesToCopy
            into dest
        }
    }
}

afterEvaluate {
    assembleDebug.dependsOn(copyTestResources)
}
configurations.all {
    resolutionStrategy.force "commons-codec:commons-codec:${libs.commonscodec}"
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    api "net.zetetic:android-database-sqlcipher:${libs.sqlcipher}"
    implementation group: 'org.ei.drishti', name: 'drishti-interface', version: "${libs.drishti}"
    implementation group: 'com.android.support', name: 'appcompat-v7', version: "${libs.supportVersion}"
    implementation group: 'org.apache.httpcomponents', name: 'httpmime', version: "${libs.httpmime}"
    implementation group: 'com.google.code.gson', name:'gson', version: "${libs.gson}"
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: "${libs.fasterxml}"
    implementation group: 'commons-codec', name: 'commons-codec', version: "${libs.commonscodec}"
    implementation group: 'commons-io', name: 'commons-io', version: "${libs.commonsio}"
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: "${libs.lang3}"
    implementation group: 'org.mozilla', name: 'rhino', version: "${libs.rhino}"
    implementation group: 'com.ocpsoft', name: 'ocpsoft-pretty-time', version: "${libs.prettytime}"
    implementation group: 'joda-time', name: 'joda-time', version: "${libs.jodatime}"
    implementation group: 'com.github.bmelnychuk', name: 'atv', version: "${libs.bmelnychuk}"
    implementation group: 'com.github.johnkil.print', name: 'print', version: "${libs.print}"
    implementation group: 'com.mcxiaoke.volley', name: 'library', version: "${libs.volley}"
    implementation group: 'com.cloudant', name: 'cloudant-http', version: "${libs.cloudant}"
    implementation("ch.acra:acra:${libs.acra}") {
        exclude group: 'org.json', module: 'json'
    }

    implementation group: 'com.google.guava', name: 'guava', version: '20.0'

    annotationProcessor fileTree(include: ['butterknife*.jar'], dir: 'libs')

    implementation 'com.android.support:recyclerview-v7:27.1.1'
}

dependencies {
    androidTestImplementation 'com.jayway.android.robotium:robotium-solo:4.3'
    androidTestImplementation 'com.google.dexmaker:dexmaker-mockito:1.2'
    androidTestImplementation 'junit:junit:4.12'

    testImplementation group: 'com.google.android', name: 'android-test', version: '4.1.1.4'
    testImplementation 'org.apache.maven:maven-ant-tasks:2.1.3'
    testImplementation 'org.mockito:mockito-core:2.8.9'
    testImplementation('com.squareup:fest-android:1.0.+') { exclude module: 'support-v4' }
    testAnnotationProcessor fileTree(include: ['butterknife*.jar'], dir: 'libs')
    testImplementation('org.robolectric:robolectric:3.8') {
        exclude group: 'com.google.guava', module: 'guava'
        exclude group: 'org.apache.maven', module: 'maven-model'
        exclude group: 'com.android.support'
        exclude group: 'com.thoughtworks.xstream', module: 'xstream'
    }
    testImplementation('org.robolectric:shadows-multidex:3.8') {
        exclude group: 'com.google.guava', module: 'guava'
    }
    testImplementation('org.robolectric:shadows-support-v4:3.3.2'){
        exclude group: 'com.google.guava', module: 'guava'
    }

    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.+') {

        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'junit', module: 'junit'
    }
    testImplementation "org.robolectric:shadows-support-v4:3.3.2"
    // PowerMock
    def powerMockVersion = '1.7.1'
    testImplementation "org.powermock:powermock-module-junit4:$powerMockVersion"
    testImplementation "org.powermock:powermock-module-junit4-rule:$powerMockVersion"
    testImplementation "org.powermock:powermock-api-mockito2:$powerMockVersion"
    testImplementation("org.powermock:powermock-classloading-xstream:$powerMockVersion")

}
task clearJar(type: Delete) {
    delete 'build/libs/myCompiledLibrary.jar'
}

task makeJar(type: Copy) {
    from('build/intermediates/bundles/release/')
    into('build/libs/')
    include('classes.jar')
    rename('classes.jar', 'myCompiledLibrary.jar')
}

makeJar.dependsOn(clearJar, build)

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    getReports().getXml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/merged.xml"))
    getReports().getHtml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/html"))

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*', '**/*$ViewBinder*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}

coveralls {
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/merged.xml"
}

apply from: '../maven.gradle'